name: Helm chart test
on:
  push:
    branches:
      - main
      - 'spike/432'

jobs:
  deploy_to_minikube:
    runs-on: ubuntu-latest
    name: Test helm chart release in minikube.
    env:
      INGRESS_HOST: localedc
      CONTROL_AUTH_APIKEY: password1
    steps:
      - uses: actions/checkout@v2
      - name: Cache packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Start minikube
        uses: medyagh/setup-minikube@master
      - name: Try the cluster
        run: kubectl get pods -A
      - name: Add ingress controller
        run: |
          minikube addons enable ingress
          kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission
          kubectl get pods --all-namespaces
      - name: Build image
        run: |
          gradle --build-cache samples:04-file-transfer:consumer:build samples:04-file-transfer:provider:build
          eval $(minikube -p minikube docker-env)
          docker build --build-arg CONNECTOR_NAME=provider -f samples/04-file-transfer/Dockerfile . -t provider:latest
          docker build --build-arg CONNECTOR_NAME=consumer -f samples/04-file-transfer/Dockerfile . -t consumer:latest
          echo -n "Verifying images:"
          docker images
      - name: Deploy to minikube
        run: |
          helm install -f helm/consumer-local-values.yaml --set controlauthapikey=${CONTROL_AUTH_APIKEY} --set ingress.host=${INGRESS_HOST} consumer-release helm --debug --wait
          helm install -f helm/provider-local-values.yaml --set controlauthapikey=${CONTROL_AUTH_APIKEY} --set ingress.host=${INGRESS_HOST} provider-release helm --debug --wait
          kubectl get all --all-namespaces

      - name: Test
        run: |
          MINIKUBE_IP=$(minikube ip)
          sudo echo "${MINIKUBE_IP} ${INGRESS_HOST}" | sudo tee -a /etc/hosts
          CONSUMER_URL=${INGRESS_HOST}/edcconsumer
          PROVIDER_URL=${INGRESS_HOST}/edcprovider
          # Test ingress and the communication between the 2 connectors.
          NEGOTIATION_ID=$(curl -X POST -H "Content-Type: application/json" -d @samples/04-file-transfer/contractoffer.json "http://${CONSUMER_URL}/api/negotiation?connectorAddress=http://${PROVIDER_URL}/api/ids/multipart")
          curl -v --fail -X GET -H "X-Api-Key: ${CONTROL_AUTH_APIKEY}" "http://${CONSUMER_URL}/api/control/negotiation/${NEGOTIATION_ID}"

